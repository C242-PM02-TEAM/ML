Create a detailed Product Requirement Document (PRD) in JSON format, with a well-defined *Success Metrics* section that includes the following and please output just the json without explaining that its in json format::
        
   Metadata:
        - Document Version: {document_version}
        - Product Name: {product_name}
        - Document Owner: {document_owner}
        - Developer: {developer}
        - Stakeholder: {stakeholder}
        - Document Stage: {doc_stage}
        - Created Date: {created_date}

       Overview:
        Input Overview: {overview}

        Problem Statement:
        Based on the provided overview, develop a cohesive and detailed paragraph describing the problem the project aims to solve. Clearly articulate the core issue, including its root causes, and explain its significance within the relevant context. Discuss the challenges faced by stakeholders, the inefficiencies or gaps in existing solutions, and the broader impact of this problem on systems, industries, or users. Ensure the problem statement highlights why addressing this issue is critical, referencing details from {overview}.

        Objective:
        Using the overview as a foundation, create a concise yet comprehensive paragraph that outlines the project’s objectives. Define the overarching goal and explain how it directly addresses the identified problem. Specify the key outcomes or deliverables expected from the project, emphasizing their value to stakeholders. Illustrate how the project will improve processes, bridge gaps in current solutions, or provide innovative benefits to its users. Tie the objectives to measurable and actionable results, ensuring alignment with the overall project purpose.


        Project Dates: Start Date: {start_date}, End Date: {end_date}

        The PRD should include the following sections:

        1. *Problem Statement*: Develop a comprehensive and detailed problem statement, breaking it down into smaller issues or challenges that need to be addressed.
        
        2. *Objective*: Provide a clear and actionable objective statement with specific goals and deliverables, indicating how the project will meet the problem statement.

        3. *DARCI Table*:
           - *Decider*: The person who has the final authority on key decisions, such as whether a feature gets prioritized, approving additional costs or resources, or making decisions that might affect the public relations (PR) of the project.
           - *Accountable*: The person responsible for overseeing the entire project, ensuring tasks are completed on time and within scope, and reporting to decision-makers. This person is fully accountable for the success or failure of the project.
           - *Responsible*: The individuals or teams actively involved in executing specific tasks related to the project. They handle the technical aspects and implementation of the solution.
           - *Consulted*: The stakeholders or experts whose input is necessary for the success of the project. Their feedback and advice are valuable, but they are not responsible for completing tasks.
           - *Informed*: Those who need to be kept updated about the project’s progress, challenges, and results. They don’t actively contribute but are kept in the loop.

           Please generate *tags* and *guidelines* for each role that explain their responsibilities and involvement in the project.

        4. *Project Timeline*:
           - Generate a *Project Timeline* table with the following columns:
             -*Time Period*: Generate specific time periods from the start and end dates provided. Ensure the timeline spans the given period and break it down into clear, actionable segments.
             -*Activity*: List the major activities or tasks to be completed during each time period. Ensure the activities are relevant to the project's scope, such as research, development, testing, deployment, etc.
             -*PIC (Person in Charge)*: Assign specific team members or teams to each activity. If the exact individuals are not available, use placeholder names like 'Team Engineering' or 'Project Manager' for responsibilities.
                Be sure to break down the overall timeline into smaller, manageable tasks. The output should follow a structure like this:
                - Ensure the timeline includes multiple phases of the project, each with clearly defined activities and responsible persons.
                - Provide *Time Period* and *Activity* for each phase and ensure to assign a *PIC* for each task. The timeline should be broken down into milestones and key activities, such as design, development, integration, testing, and deployment.
                  The PRD should include the following *Project Timeline* section:

                - Time Period: [Start Date] - [End Date]
                - Activity: [Describe the activity that will take place during this period]
                - PIC: [Name of person/team responsible for the activity]

                Example:
                1. Time Period: 03 Sep 2024 - 20 Sep 2024
                Activity: Model Development (e.g., MTCNN/DeepFace)
                PIC: Team Engineering

                2. Time Period: 23 Sep 2024 - 07 Oct 2024
                Activity: Flask/FastAPI Development
                PIC: Team Engineering

                3. Time Period: 07 Oct 2024 - 18 Oct 2024
                Activity: Mobile Integration (e.g., Kotlin)
                PIC: Team Engineering

                4. Time Period: 21 Oct 2024 - 01 Nov 2024
                Activity: Testing and Optimization
                PIC: Team Engineering

                The timeline should be as detailed as possible, breaking down large tasks into smaller subtasks if necessary, and assign realistic timeframes and responsibilities.

        5. *Success Metrics*:
            Using the provided {overview}, create a Success Metrics Table to evaluate the project's Key Performance Indicators (KPIs). The table must reflect the project’s domain, objectives, and challenges, providing a comprehensive and actionable evaluation framework.

                  Table Requirements:
                  The output must include exactly 8 metrics regardless of the context unless explicitly directed otherwise in the {overview}.

                  Metrics: Define specific measures of success (e.g., system performance, user engagement, scalability, accuracy).
                  Definition: Provide a clear and concise explanation of what each metric measures, why it is important, and how it aligns with the project goals described in the {overview}.
                  Actual: Indicate the current or estimated value of the metric. Use "-" as a placeholder if data is unavailable.
                  Target: Include both a measurable target value and a brief explanation of its significance, addressing why it’s important and what achieving it entails for the project. Ensure targets are SMART (Specific, Measurable, Achievable, Relevant, and Time-bound).
                        
                  Output Requirements:
                  Generate exactly 8 metrics unless the {overview} explicitly suggests fewer.
                  Tailor each metric to cover key aspects of the project, such as performance, reliability, user satisfaction, scalability, engagement, or specific objectives mentioned in the {overview}.
                  Ensure each metric provides a well-rounded evaluation of the project’s success, addressing both quantitative and qualitative goals.

         6. User Stories:
            Using the provided {overview}, generate **exactly 8 User Stories and title summarize 2 words**. 

            Table Requirements:
            1. The output must include exactly 8 User Stories regardless of the context unless explicitly directed otherwise in the {overview}.
            2. For missing stories, logically infer additional user needs, enhancements, or edge cases tied to the project goals.

            Each story must include:
            - **Title**: Each story is now summarized with exactly *two words*
            - **User Story**: A statement in the format: "As a [specific user persona], I want [specific functionality or feature] so that [desired outcome]."
            - **Acceptance Criteria**: Written as a single paragraph, using measurable conditions in the format:
            - "Given [Condition or situation that must be true at the start], When [Action or event that triggers the condition], Then [Expected outcome or behavior after the action is triggered]."
            - **Priority**: Assign "High," "Medium," or "Low" based on:
            - High: Critical to success or user satisfaction.
            - Medium: Important but non-urgent.
            - Low: Enhancements or optional features.

            Output Requirements:
            1. Generate exactly 8 User Stories unless the {overview} explicitly suggests fewer.
            2. The output must be in JSON format.
            3. Each story must be clear, concise, and directly reflect the project's objectives and problem statement.
            4. If fewer stories are naturally generated, infer the remaining based on project goals.

            Note: The acceptance criteria and user stories must focus on outcomes, clarity, and measurable success factors.

  

        Please ensure that each user story follows this format with clear and actionable acceptance criteria and a defined priority. Ensure consistency in the wording of *Acceptance Criteria* and make sure the *Priority* aligns with the business goals.

        Return the result as a detailed and structured JSON. The output should clearly show the *Title, **User Story, **Acceptance Criteria, and **Priority* for each user story. The *Priority* should be set based on the urgency and importance of the feature to the overall project objectives.

    """
