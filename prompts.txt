Create a detailed Product Requirement Document (PRD) in JSON format, with a well-defined *Success Metrics* section that includes the following and please output just the json without explaining that its in json format::

        Metadata:
        - Document Version: {document_version}
        - Product Name: {product_name}
        - Document Owner: {document_owner}
        - Developer: {developer}
        - Stakeholder: {stakeholder}
        - Document Stage: {doc_stage}
        - Created Date: {created_date}

       Overview:
        Project Dates: Start Date: {start_date}, End Date: {end_date}

        The PRD should include the following sections:
        Input Overview: {overview}

        1. *Problem Statement*:   Based on the provided {overview}, develop a detailed and cohesive statement in **two paragraphs**. Each paragraph should contain no fewer than five sentences. In the first paragraph, clearly articulate the core issue the project aims to solve, including its root causes. Explain why this issue is significant within the relevant context, whether it's related to industry trends, user needs, or operational challenges. Discuss how current solutions fail to address this issue adequately, highlighting any inefficiencies or gaps. In the second paragraph, elaborate on the broader impact of this problem, including how it affects stakeholders, industries, or users at large. Discuss the potential risks of not addressing this issue and how the status quo could worsen over time. The problem statement should emphasize the urgency of solving this issue and why the project is crucial.
           **the output is a key *Probelem Statements* and inside the key there must be 2 paragraphs not (list and key)**
        2. *Objective*: Based on the provided {overview},Provide a clear and actionable objective section in **two paragraphs**. In the first paragraph, define the primary goals of the project and how they specifically address the identified problem. Clearly outline the desired outcomes or deliverables, ensuring they are aligned with the problem statement. Discuss how these goals will improve existing processes, reduce inefficiencies, or meet user demands. In the second paragraph, outline measurable and actionable results expected from the project. Highlight how the project will achieve these results using innovative methods, technologies, or process improvements. Make sure the objectives are realistic, time-bound, and linked to tangible benefits for stakeholders and users.
           **the output is a key *Objective* and inside the key there must be 2 paragraphs not (list an key)**


        3. *DARCI Table*:
             "Based on the provided {overview}, Problem statement, and Objective, generate a list of dictionaries where each dictionary represents a role (Decider, Accountable, Responsible, Consulted, Informed) in the context of the project. Each dictionary should include the following fields:
           - *Role*:  Include the specific roles (Decider, Accountable, Responsible, Consulted, Informed).
           - *Tags*:  A dash (-) as the placeholder for this field.
           - *guidlines* :  The guidelines should explain the specific responsibilities and involvement of each role based on the provided {overview}, Problem statement, and Objective. Tailor the guidelines to the unique aspects of the project, including its goals, challenges, technologies, and stakeholders. Be sure to integrate details from the overview to make each role’s guidelines highly relevant to the project’s success. The tone should be clear, professional, and directly applicable to the project context.
             Please generate guidelines for each role that clearly reflect their responsibilities, actions, and involvement in the project.
             

        4. *Project Timeline*:
           - Generate a *Project Timeline* table with the following columns:
             -*Time Period*: Generate specific time periods from the start and end dates provided. Ensure the timeline spans the given period and break it down into clear, actionable segments.
             -*Activity*: List the major activities or tasks to be completed during each time period. Ensure the activities are relevant to the project's scope, such as research, development, testing, deployment, etc.
             -*PIC (Person in Charge)*: Assign specific team members or teams to each activity. If the exact individuals are not available, use placeholder names like 'Team Engineering' or 'Project Manager' for responsibilities.
                Be sure to break down the overall timeline into smaller, manageable tasks. The output should follow a structure like this:
                - Ensure the timeline includes multiple phases of the project, each with clearly defined activities and responsible persons.
                - Provide *Time Period* and *Activity* for each phase and ensure to assign a *PIC* for each task. The timeline should be broken down into milestones and key activities, such as design, development, integration, testing, and deployment.
                  The PRD should include the following *Project Timeline* section:

                - Time Period: [Start Date] - [End Date]
                - Activity: [Describe the activity that will take place during this period]
                - PIC: [Name of person/team responsible for the activity]

                Example:
                1. Time Period: 03 Sep 2024 - 20 Sep 2024
                Activity: Model Development (e.g., MTCNN/DeepFace)
                PIC: Team Engineering

                2. Time Period: 23 Sep 2024 - 07 Oct 2024
                Activity: Flask/FastAPI Development
                PIC: Team Engineering

                3. Time Period: 07 Oct 2024 - 18 Oct 2024
                Activity: Mobile Integration (e.g., Kotlin)
                PIC: Team Engineering

                4. Time Period: 21 Oct 2024 - 01 Nov 2024
                Activity: Testing and Optimization
                PIC: Team Engineering

                The timeline should be as detailed as possible, breaking down large tasks into smaller subtasks if necessary, and assign realistic timeframes and responsibilities.

        5. *Success Metrics*:
           - Define a *Success Metrics* table with the following columns:
             - *Metrics*: The specific measure of success, such as accuracy, performance, user satisfaction, etc.
             - *Definition*: A clear description of what the metric represents.
             - *Actual*: The current or estimated actual value of the metric (can be left as "N/A" initially).
             - *Target: The target value that needs to be achieved for this metric. The **Target* does not have to be a percentage; it can be a specific value, such as a time frame, number of users, or performance level.
           - Provide clear *Target* values based on the *Metrics* and *Definition*. Make sure the metrics align with the project's key objectives.

        6. *User Stories*:
           - *Title*: Based on the provided Problem Statement and Objective, generate user story titles that reflect key solutions addressing the problems. The titles must:  
               1. Be concise, clear, and user-focused.  
               2. Derive directly from the provided Problem Statement and Objectives, emphasizing solutions.  
               3. Represent specific functionalities or improvements to the system.

               Example:  
               - For "irrelevant responses" and "design contextualized responses," the title should be "More Relevant Responses."  
               - For "context understanding" and "improve adaptability," the title should be "Consultation Requirements."  

               Write the titles without formatting or additional descriptions.

           - *User Story*:  Based on each generated Title, create a user story using the following format:

               "As a [specific user persona], I want [specific functionality or feature] so that [desired outcome]."
               Limit the user story to 4 sentences or fewer to maintain clarity.
               Example:

               Title: "More Relevant Responses"
               User Story: "As a user seeking quick and concise information, I want the virtual assistant to provide clear and concise answers so that I can get the most relevant information without unnecessary details."

           - *Acceptance Criteria: Based on the provided Problem Statement and Objectives, generate user story titles, user stories, and acceptance criteria in one paragraph for each title. Titles must be concise, user-focused, and solution-oriented, addressing specific problems and objectives. For each title, create a corresponding user story in the format: "As a [specific user persona], I want [specific functionality or feature] so that [desired outcome]." Then, describe the acceptance criteria for this user story in a single paragraph, specifying conditions for successful implementation. Use clear and simple language to ensure alignment with the problem statement and objectives.

               Example Prompt Output:
               Title: More Relevant Responses
               User Story: As a user seeking quick and concise information, I want the virtual assistant to provide clear and concise answers so that I can get the most relevant information without unnecessary details.
               Acceptance Criteria: Given a user looking for quick and concise information, when the user interacts with the virtual assistant, the system should provide clear and concise responses, avoiding unnecessary details and focusing on delivering the most relevant information based on the query, ensuring improved accuracy and user satisfaction.

               This structure ensures clarity and alignment across the problem statement, objectives, and user needs.
             
           - *Priority*: Assign a priority level (High, Medium, Low) based on the importance and urgency of the user story. This should help prioritize development tasks (e.g., "High", "Medium", "Low")
         
         Please ensure that each user story follows this format with clear and actionable acceptance criteria and a defined priority. Ensure consistency in the wording of *Acceptance Criteria* and make sure the *Priority* aligns with the business goals.
         
         Return the result as a detailed and structured JSON. The output should clearly show the *Title, **User Story, **Acceptance Criteria, and **Priority* for each user story. The *Priority* should be set based on the urgency and importance of the feature to the overall project objectives.


    """
