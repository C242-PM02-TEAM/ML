"""
Create a detailed Product Requirement Document (PRD) in JSON format, with a well-defined *Success Metrics* section that includes the following and please output just the json without explaining that its in json format::

        Metadata:
        - Document Version: {document_version}
        - Product Name: {product_name}
        - Document Owner: {document_owner}
        - Developer: {developer}
        - Stakeholder: {stakeholder}
        - Document Stage: {doc_stage}
        - Created Date: {created_date}

       Overview:
        Project Dates: Start Date: {start_date}, End Date: {end_date}

        The PRD should include the following sections:
        Input Overview: {overview}

        1. *Problem Statement*: Based on the provided {overview}, develop a detailed and cohesive statement in **two paragraphs**. Each paragraph should contain no fewer than five sentences. In the first paragraph, clearly articulate the core issue the project aims to solve, including its root causes. Explain why this issue is significant within the relevant context, whether it's related to industry trends, user needs, or operational challenges. Discuss how current solutions fail to address this issue adequately, highlighting any inefficiencies or gaps. In the second paragraph, elaborate on the broader impact of this problem, including how it affects stakeholders, industries, or users at large. Discuss the potential risks of not addressing this issue and how the status quo could worsen over time. The problem statement should emphasize the urgency of solving this issue and why the project is crucial.
           **Output is a key *Probelem Statements* and inside the key there must be 3 paragraphs *not list,ke, and poin***
           
        2. *Objective*: Based on the provided {overview},Provide a clear and actionable objective section in **two paragraphs**. In the first paragraph, define the primary goals of the project and how they specifically address the identified problem. Clearly outline the desired outcomes or deliverables, ensuring they are aligned with the problem statement. Discuss how these goals will improve existing processes, reduce inefficiencies, or meet user demands. In the second paragraph, outline measurable and actionable results expected from the project. Highlight how the project will achieve these results using innovative methods, technologies, or process improvements. Make sure the objectives are realistic, time-bound, and linked to tangible benefits for stakeholders and users.
           **Output is a key *Objective* and inside the key there must be 3 paragraphs *not list,key,and poin***

        3. *DARCI Table*:
             Based on the provided **overview**: "{overview}", create a DARCI Table.
               - **Role**: Define the role name just (Decision Maker, Accountable, Responsible, Consulted, Informed).
               - **Tags**: Leave the field as "-" unless there is a specific tag for the role.
               - **Guidelines**: Write **detailed, actionable, and specific guidelines** for each role in a **single paragraph containing at least 3 sentences**. 
               1. Each guideline must contain at least 3 actionable sentences tied to measurable aspects of the project {overview} (e.g., defining deadlines, selecting tools, conducting reviews, testing phases, user acceptance criteria).
               2. Explicitly mention tasks, tools, or workflows that are uniquely relevant to the project {overview}.
               3. Each guideline must contain at least 3 actionable sentences tied directly to measurable aspects of the project (e.g., defining deadlines, selecting tools, conducting reviews, testing phases, user acceptance criteria).
               4. Use specific tasks and project outcomes rather than vague or generic terms (e.g., instead of "manage," use "review designs for accessibility compliance," "coordinate development tasks with timelines," or "test functionality and usability").
               5. Clearly link responsibilities to the project's outputs and goals, such as development milestones, feature implementations, and integration requirements.

            Output a list with 5 dictionary must avoid generic descriptions and connect every role directly to the project's unique objectives.

        4. *Project Timeline*:
            Generate a highly detailed Project Timeline table based on the provided Objective and Problem Statement. The table must include the following columns:

             Rules:
                  1. Ensure all activities are derived from {overview}.
                  2. Ensure each Time Period is expressed in the format YYYY-MM-DD - YYYY-MMMM-DD to reflect specific start and end dates.
                  3. Provide realistic timeframes and assign appropriate responsibilities.

             each Project Timeline must include:
               - **Time Period**:
                  1. Use distinct  {start_date} and {end_date} for each phase in the format YYYY-MMMM-DD - YYYY-MM-DD.
                  2. Ensure the timeline is divided into at least 6-7 phases with realistic timeframes.

               - **Activity**:
                   Provide *3 sentence description* of the tasks to be accomplished in this phase. Each description should clearly define the following:

                     1. Actionable Steps: Outline the specific actions to be taken, such as designing features, developing modules, or conducting user tests.
                     2. Purpose: Explain the reason behind each task, i.e., how the task contributes to solving the problem (e.g., improving app usability, ensuring system reliability, etc.).
                     3. Expected Outcomes: State the results you aim to achieve after completing the task (e.g., a functional module, bug-free code, validated user interface).
                     4. Direct Link to Problem Statement and Objective: Clarify how the task directly addresses the problem or aligns with the project’s overall goal
                     5. Iterative Processes: If relevant, describe any processes like testing, reviews, or feedback loops, to ensure continuous improvement towards the goal (e.g., running usability tests, gathering feedback, refining features).

               - **PIC (Person in Charge)**:
                  1. Assign specific individuals or teams basfed on the provided roles. If specific names are not available, use placeholders like "Frontend Team", "Backend Team", or similar.
                  
                 

                  Example Structure:
                     "Time Period": "2025-March-01 - 2025-March-31",
                     "Activity": "Planning and Requirements Gathering: During this phase, the team will collaborate with stakeholders to define project objectives, scope, and deliverables. Tasks include conducting interviews, identifying user personas, drafting a detailed project plan, and finalizing key performance indicators. This phase ensures the project is built on a strong foundation and aligns with stakeholder expectations.",
                     "PIC": "Sophia"
                  

        5. *Success Metrics*:
            Using the provided {overview}, create a Success Metrics Table to evaluate the project's Key Performance Indicators (KPIs). The table must reflect the project’s domain, objectives, and challenges, providing a comprehensive and actionable evaluation framework.

            Table Requirements:
            1. The output must include exactly 8 metrics regardless of the context unless explicitly directed otherwise in the {overview}.
            
            each Success Metrics must include:
            - **Metrics**: Define specific measures of success (e.g., system performance, user engagement, scalability, accuracy).
            - **Definition**: Provide a clear and concise explanation of what each metric measures, why it is important, and how it aligns with the project goals described in the {overview}.
            - **Actual**: Indicate the current or estimated value of the metric. Use "-" as a placeholder if data is unavailable.
            - **Target**: Include both a measurable target value and a brief explanation of its significance, addressing why it’s important and what achieving it entails for the project. Ensure targets are SMART (Specific, Measurable, Achievable, Relevant, and Time-bound).
                        
            Output Requirements:
            1. Generate exactly 8 metrics unless the {overview} explicitly suggests fewer.
            2. Tailor each metric to cover key aspects of the project, such as performance, reliability, user satisfaction, scalability, engagement, or specific objectives mentioned in the {overview}.
            3. Ensure each metric provides a well-rounded evaluation of the project’s success, addressing both quantitative and qualitative goals.

         6. User Stories:
            Using the provided {overview}, generate **exactly 8 User Stories and title summarize 2 words**. 

            Table Requirements:
            1. The output must include exactly 8 User Stories regardless of the context unless explicitly directed otherwise in the {overview}.
            2. For missing stories, logically infer additional user needs, enhancements, or edge cases tied to the project goals.

            Each story must include:
            - **Title**: Each story is now summarized with exactly *two words*
            - **User Story**: A statement in the format: "As a [specific user persona], I want [specific functionality or feature] so that [desired outcome]."
            - **Acceptance Criteria**: Written as a single paragraph, using measurable conditions in the format:
            - "Given [Condition or situation that must be true at the start], When [Action or event that triggers the condition], Then [Expected outcome or behavior after the action is triggered]."
            - **Priority**: Assign "High," "Medium," or "Low" based on:
            - High: Critical to success or user satisfaction.
            - Medium: Important but non-urgent.
            - Low: Enhancements or optional features.

            Output Requirements:
            1. Generate exactly 8 User Stories unless the {overview} explicitly suggests fewer.
            2. The output must be in JSON format.
            3. Each story must be clear, concise, and directly reflect the project's objectives and problem statement.
            4. If fewer stories are naturally generated, infer the remaining based on project goals.

            Note: The acceptance criteria and user stories must focus on outcomes, clarity, and measurable success factors.

         Return the result as a detailed and structured JSON. The output should clearly show the *Title, **User Story, **Acceptance Criteria, and **Priority* for each user story. The *Priority* should be set based on the urgency and importance of the feature to the overall project objectives.

    """
